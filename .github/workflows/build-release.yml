name: Auto Pre-Release Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: write
  actions: read

jobs:
  build-jar:
    runs-on: ubuntu-latest
    outputs:
      jar-artifact: ${{ steps.upload.outputs.artifact-id }}
      build-success: ${{ steps.build.outputs.build_success }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Maven Daemon (mvnd)
        run: |
          # Download and install mvnd for faster builds
          curl -L https://github.com/apache/maven-mvnd/releases/download/1.0.2/maven-mvnd-1.0.2-linux-amd64.tar.gz -o mvnd.tar.gz
          tar -xzf mvnd.tar.gz
          sudo mv maven-mvnd-1.0.2-linux-amd64 /opt/mvnd
          sudo ln -s /opt/mvnd/bin/mvnd /usr/local/bin/mvnd
          mvnd --version

      - name: Build JAR with Maven Daemon
        id: build
        run: |
          echo "Building JAR using mvnd clean package..."
          if mvnd clean package -DskipTests; then
            echo "Build successful"
            echo "build_success=true" >> $GITHUB_OUTPUT
          
            # Check if JAR file exists
            if [ -f "target/Shimeji-ee.jar" ]; then
              echo "JAR file created successfully: target/Shimeji-ee.jar"
              JAR_SIZE=$(stat -c%s "target/Shimeji-ee.jar")
              echo "JAR file size: $JAR_SIZE bytes"
            else
              echo "Error: JAR file not found after build"
              echo "build_success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "Build failed"
            echo "build_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload JAR artifact
        id: upload
        if: steps.build.outputs.build_success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: shimeji-jar
          path: |
            target/Shimeji-ee.jar
            lib/
            conf/
            img/
            *.txt
            *.md
            LICENSE
            MANIFEST.MF
          retention-days: 1

  build-jpackage-windows:
    needs: build-jar
    if: needs.build-jar.outputs.build-success == 'true'
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install WiX Toolset
        run: |
          # Download and install WiX Toolset v3.14.1
          $url = "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314.exe"
          $output = "$env:TEMP\wix314.exe"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process -FilePath $output -ArgumentList "/install", "/quiet", "/norestart" -Wait
          # Add WiX to PATH
          echo "C:\Program Files (x86)\WiX Toolset v3.14\bin" >> $env:GITHUB_PATH
        shell: powershell

      - name: Install Maven Daemon (mvnd)
        run: |
          # Download and install mvnd for faster builds
          $url = "https://github.com/apache/maven-mvnd/releases/download/1.0.2/maven-mvnd-1.0.2-windows-amd64.zip"
          $output = "$env:TEMP\mvnd.zip"
          Invoke-WebRequest -Uri $url -OutFile $output
          Expand-Archive -Path $output -DestinationPath "C:\mvnd"
          echo "C:\mvnd\maven-mvnd-1.0.2-windows-amd64\bin" >> $env:GITHUB_PATH
        shell: powershell

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Windows packages with mvnd
        run: |
          # Build using mvnd with jpackage-win profile
          mvnd -P jpackage-win install
        shell: powershell

      - name: Upload Windows MSI installer
        uses: actions/upload-artifact@v4
        with:
          name: Shimeji-ee-windows-msi
          path: target/*.msi
          retention-days: 1
          if-no-files-found: warn

      - name: Upload Windows portable package
        uses: actions/upload-artifact@v4
        with:
          name: Shimeji-ee-windows-portable
          path: target/Shimeji-ee_*_Windows_Portable.zip
          retention-days: 1
          if-no-files-found: warn

  build-jpackage-macos-amd64:
    needs: build-jar
    if: needs.build-jar.outputs.build-success == 'true'
    runs-on: macos-13  # Intel-based macOS for AMD64 builds

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          architecture: x64

      - name: Install Maven Daemon (mvnd)
        run: |
          # Download and install mvnd for faster builds
          curl -L https://github.com/apache/maven-mvnd/releases/download/1.0.2/maven-mvnd-1.0.2-darwin-amd64.tar.gz -o mvnd.tar.gz
          tar -xzf mvnd.tar.gz
          sudo mv maven-mvnd-1.0.2-darwin-amd64 /opt/mvnd
          # Set MVND_HOME environment variable
          echo "MVND_HOME=/opt/mvnd" >> $GITHUB_ENV
          echo "/opt/mvnd/bin" >> $GITHUB_PATH
          # Test mvnd installation
          /opt/mvnd/bin/mvnd --version

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build macOS AMD64 packages with mvnd
        run: |
          # Build using mvnd with jpackage-mac profile
          /opt/mvnd/bin/mvnd -P jpackage-mac install

      - name: Upload macOS AMD64 DMG installer
        uses: actions/upload-artifact@v4
        with:
          name: Shimeji-ee-macos-amd64-dmg
          path: target/*.dmg
          retention-days: 1
          if-no-files-found: warn

      - name: Upload macOS AMD64 portable package
        uses: actions/upload-artifact@v4
        with:
          name: Shimeji-ee-macos-amd64-portable
          path: target/Shimeji-ee_*_macOS_Portable.zip
          retention-days: 1
          if-no-files-found: warn

  build-jpackage-macos-arm64:
    needs: build-jar
    if: needs.build-jar.outputs.build-success == 'true'
    runs-on: macos-14  # Apple Silicon macOS for ARM64 builds

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          architecture: aarch64

      - name: Install Maven Daemon (mvnd)
        run: |
          # Download and install mvnd for faster builds
          curl -L https://github.com/apache/maven-mvnd/releases/download/1.0.2/maven-mvnd-1.0.2-darwin-aarch64.tar.gz -o mvnd.tar.gz
          tar -xzf mvnd.tar.gz
          sudo mv maven-mvnd-1.0.2-darwin-aarch64 /opt/mvnd
          # Set MVND_HOME environment variable
          echo "MVND_HOME=/opt/mvnd" >> $GITHUB_ENV
          echo "/opt/mvnd/bin" >> $GITHUB_PATH
          # Test mvnd installation
          /opt/mvnd/bin/mvnd --version

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build macOS ARM64 packages with mvnd
        run: |
          # Build using mvnd with jpackage-mac profile
          /opt/mvnd/bin/mvnd -P jpackage-mac install

      - name: Upload macOS ARM64 DMG installer
        uses: actions/upload-artifact@v4
        with:
          name: Shimeji-ee-macos-arm64-dmg
          path: target/*.dmg
          retention-days: 1
          if-no-files-found: warn

      - name: Upload macOS ARM64 portable package
        uses: actions/upload-artifact@v4
        with:
          name: Shimeji-ee-macos-arm64-portable
          path: target/Shimeji-ee_*_macOS_Portable.zip
          retention-days: 1
          if-no-files-found: warn

  create-release:
    needs: [build-jar, build-jpackage-windows, build-jpackage-macos-amd64, build-jpackage-macos-arm64]
    runs-on: ubuntu-latest
    if: needs.build-jar.outputs.build-success == 'true'

    steps:
      - name: Checkout code (for release notes)
        uses: actions/checkout@v4

      - name: Download all platform packages
        uses: actions/download-artifact@v4
        with:
          pattern: Shimeji-ee-*
          merge-multiple: true

      - name: Check for existing pre-release
        id: check_prerelease
        run: |
          # Get existing pre-releases
          PRERELEASE_COUNT=$(gh release list --limit 50 --json isPrerelease,tagName | jq '[.[] | select(.isPrerelease == true)] | length')
          echo "prerelease_count=$PRERELEASE_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$PRERELEASE_COUNT" -gt 0 ]; then
            echo "Found $PRERELEASE_COUNT pre-release(s)"
            PRERELEASE_TAG=$(gh release list --limit 50 --json isPrerelease,tagName | jq -r '[.[] | select(.isPrerelease == true)] | first | .tagName')
            echo "prerelease_tag=$PRERELEASE_TAG" >> $GITHUB_OUTPUT
          else
            echo "No pre-releases found"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release info
        id: release_info
        run: |
          # Generate timestamp for release
          TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
          RELEASE_TAG="pre-release-$TIMESTAMP"
          RELEASE_NAME="Pre-release Build $TIMESTAMP"
          
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          
          # Generate release notes
          BUILD_TIME=$(date '+%Y-%m-%d %H:%M:%S UTC')
          cat > release_notes.md << EOF
          # Shimeji-ee Native Builds / Shimeji-ee 原生版本
          
          **Build Date / 构建日期:** $BUILD_TIME  
          **Commit / 提交:** ${{ github.sha }}
          
          ## What's included / 包含内容:
          
          ### Native packages built with jpackage / 使用 jpackage 构建的原生包:
          
          #### Windows (x86 & x64 支持)
          - **Shimeji-ee.msi** - Windows MSI installer with embedded JRE / Windows MSI 安装程序，含嵌入式 JRE
          - **Shimeji-ee_2.0.0_Windows_Portable.zip** - Windows portable version with embedded JRE / Windows 便携版，含嵌入式 JRE
          
          #### macOS
          - **Shimeji-ee-amd64.dmg** - macOS Intel (x64) DMG installer with embedded JRE / macOS Intel (x64) DMG 安装程序，含嵌入式 JRE
          - **Shimeji-ee_2.0.0_macOS_Portable-amd64.zip** - macOS Intel (x64) portable version / macOS Intel (x64) 便携版
          - **Shimeji-ee-arm64.dmg** - macOS Apple Silicon (ARM64) DMG installer with embedded JRE / macOS Apple Silicon (ARM64) DMG 安装程序，含嵌入式 JRE
          - **Shimeji-ee_2.0.0_macOS_Portable-arm64.zip** - macOS Apple Silicon (ARM64) portable version / macOS Apple Silicon (ARM64) 便携版
          
          ## Installation / 安装说明:
          
          ### Windows (推荐使用)
          1. **MSI Installer / MSI 安装程序**: Download and run the MSI file for system-wide installation
             下载并运行 MSI 文件进行系统级安装
          2. **Portable Version / 便携版**: Extract the portable zip and run Shimeji-ee.exe
             解压便携版 zip 并运行 Shimeji-ee.exe
          
          ### macOS (新增支持!)
          1. **DMG Installer / DMG 安装程序**: Download the appropriate DMG for your Mac architecture:
             下载适合您 Mac 架构的 DMG：
             - Intel Macs (x64): Download the amd64 DMG / Intel Mac (x64)：下载 amd64 DMG
             - Apple Silicon Macs (M1/M2/M3): Download the arm64 DMG / Apple Silicon Mac (M1/M2/M3)：下载 arm64 DMG
          2. **Portable Version / 便携版**: Extract the portable zip and run Shimeji-ee.app
             解压便携版 zip 并运行 Shimeji-ee.app
          
          **No Java installation required! All packages include embedded JRE 21.**
          **无需安装 Java！所有包都包含嵌入式 JRE 21。**
          
          ## Technical Details / 技术详情:
          - **JRE Version / JRE 版本**: OpenJDK 21 (embedded in native packages)
          - **Build Tool / 构建工具**: Maven Daemon (mvnd) + jpackage
          - **Packaging / 打包方式**: Native application bundles with embedded runtime
          - **Architecture / 架构**: 
            - Windows: Supports both x86 and x64 systems / 支持 x86 和 x64 系统
            - macOS: Separate builds for Intel (AMD64) and Apple Silicon (ARM64) / Intel (AMD64) 和 Apple Silicon (ARM64) 分别构建
          - **File Size / 文件大小**: Larger than JAR-only due to embedded JRE, but no Java installation required
          
          ## Advantages of jpackage builds / jpackage 构建的优势:
          - **Zero Java dependency / 零 Java 依赖**: No need to install Java separately
          - **Native performance / 原生性能**: Better startup time and system integration
          - **Easy distribution / 简易分发**: Single file/folder contains everything needed
          - **System integration / 系统集成**: Proper application registration and desktop shortcuts
          - **Wide compatibility / 广泛兼容性**: 
            - Windows 10/11 (both x86 and x64)
            - macOS 10.15+ (Intel and Apple Silicon)
          
          ## Notes / 注意事项:
          - jpackage builds are larger due to embedded JRE but provide better user experience
            jpackage 构建由于嵌入式 JRE 而较大，但提供更好的用户体验
          - All packages include proper JVM parameters for Java 21+ compatibility
            所有包都包含适用于 Java 21+ 兼容性的正确 JVM 参数
          - Built using Maven Daemon (mvnd) for faster build times
            使用 Maven Daemon (mvnd) 构建以获得更快的构建时间
          - macOS builds are architecture-specific for optimal performance
            macOS 构建针对特定架构优化以获得最佳性能
          
          This is an automated pre-release build generated at $BUILD_TIME using jpackage technology.
          
          这是在 $BUILD_TIME 使用 jpackage 技术自动生成的预发布版本。
          
          ---
          *This release was automatically generated from commit ${{ github.sha }} / 此版本由提交 ${{ github.sha }} 自动生成*
          EOF

      - name: Delete existing pre-release
        if: steps.check_prerelease.outputs.prerelease_count > 0
        run: |
          echo "Deleting existing pre-release: ${{ steps.check_prerelease.outputs.prerelease_tag }}"
          gh release delete "${{ steps.check_prerelease.outputs.prerelease_tag }}" --yes
          
          # Also delete the tag
          git push --delete origin "${{ steps.check_prerelease.outputs.prerelease_tag }}" || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create new pre-release
        run: |
          echo "Creating new pre-release: ${{ steps.release_info.outputs.release_tag }}"
          
          # List all downloaded files for debugging
          echo "Available files:"
          ls -la
          
          # Create release with files that exist
          FILES_TO_UPLOAD=""
          
          # Check for Windows files with exact file matching
          if ls Shimeji-ee*.msi 1> /dev/null 2>&1; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD Shimeji-ee*.msi"
          fi
          if ls Shimeji-ee*Portable*.zip 1> /dev/null 2>&1; then
            # Separate Windows and macOS portable files
            for file in Shimeji-ee*Portable*.zip; do
              if [[ "$file" == *"macOS"* ]]; then
                continue  # Skip macOS files in this check
              fi
              FILES_TO_UPLOAD="$FILES_TO_UPLOAD \"$file\""
            done
          fi
          
          # Check for macOS files with exact file matching
          if ls Shimeji-ee*.dmg 1> /dev/null 2>&1; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD Shimeji-ee*.dmg"
          fi
          if ls Shimeji-ee*macOS*.zip 1> /dev/null 2>&1; then
            for file in Shimeji-ee*macOS*.zip; do
              FILES_TO_UPLOAD="$FILES_TO_UPLOAD \"$file\""
            done
          fi
          
          echo "Files to upload: $FILES_TO_UPLOAD"
          
          if [ -z "$FILES_TO_UPLOAD" ]; then
            echo "Warning: No package files found to upload"
            exit 1
          fi
          
          # Upload files one by one to avoid glob expansion issues
          gh release create "${{ steps.release_info.outputs.release_tag }}" \
            --title "${{ steps.release_info.outputs.release_name }}" \
            --notes-file release_notes.md \
            --prerelease
          
          # Upload each file individually
          for file in Shimeji-ee*.msi Shimeji-ee*Windows_Portable*.zip Shimeji-ee*.dmg Shimeji-ee*macOS*.zip; do
            if [ -f "$file" ]; then
              echo "Uploading: $file"
              gh release upload "${{ steps.release_info.outputs.release_tag }}" "$file" || echo "Failed to upload $file"
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}