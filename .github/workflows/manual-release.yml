name: Manual Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_name:
        description: 'Release name (e.g., Shimeji-ee v1.0.0)'
        required: true
        type: string
      is_prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

jobs:
  build-jar:
    runs-on: ubuntu-latest
    outputs:
      jar-artifact: ${{ steps.upload.outputs.artifact-id }}
      build-success: ${{ steps.build.outputs.build_success }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Maven Daemon (mvnd)
        run: |
          # Download and install mvnd for faster builds
          curl -L https://github.com/apache/maven-mvnd/releases/download/1.0.2/maven-mvnd-1.0.2-linux-amd64.tar.gz -o mvnd.tar.gz
          tar -xzf mvnd.tar.gz
          sudo mv maven-mvnd-1.0.2-linux-amd64 /opt/mvnd
          sudo ln -s /opt/mvnd/bin/mvnd /usr/local/bin/mvnd
          mvnd --version

      - name: Build JAR with Maven Daemon
        id: build
        run: |
          echo "Building JAR using mvnd clean package..."
          if mvnd clean package -DskipTests; then
            echo "Build successful"
            echo "build_success=true" >> $GITHUB_OUTPUT
          
            # Check if JAR file exists
            if [ -f "target/Shimeji-ee.jar" ]; then
              echo "JAR file created successfully: target/Shimeji-ee.jar"
              JAR_SIZE=$(stat -c%s "target/Shimeji-ee.jar")
              echo "JAR file size: $JAR_SIZE bytes"
            else
              echo "Error: JAR file not found after build"
              echo "build_success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "Build failed"
            echo "build_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload JAR artifact
        id: upload
        if: steps.build.outputs.build_success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: shimeji-jar
          path: |
            target/Shimeji-ee.jar
            lib/
            conf/
            img/
            *.txt
            *.md
            LICENSE
            MANIFEST.MF
          retention-days: 1

  build-jpackage-windows:
    needs: build-jar
    if: needs.build-jar.outputs.build-success == 'true'
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install WiX Toolset
        run: |
          # Download and install WiX Toolset v3.14.1
          $url = "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314.exe"
          $output = "$env:TEMP\wix314.exe"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process -FilePath $output -ArgumentList "/install", "/quiet", "/norestart" -Wait
          # Add WiX to PATH
          echo "C:\Program Files (x86)\WiX Toolset v3.14\bin" >> $env:GITHUB_PATH
        shell: powershell

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: shimeji-jar

      - name: Build jpackage Windows packages
        run: |
          echo "Building Windows packages using Maven jpackage profile..."
          mvn clean install -Pjpackage -DskipTests
          echo "Checking for generated files:"
          if (Test-Path "target\*.msi") { dir target\*.msi } else { echo "No MSI files found" }
          if (Test-Path "target\*Portable*.zip") { dir target\*Portable*.zip } else { echo "No portable ZIP files found" }
        shell: powershell

      - name: Upload Windows MSI installer
        uses: actions/upload-artifact@v4
        with:
          name: Shimeji-ee-windows-msi
          path: |
            target/*.msi
            target/*.exe
          retention-days: 1
          if-no-files-found: warn

      - name: Upload Windows portable package
        uses: actions/upload-artifact@v4
        with:
          name: Shimeji-ee-windows-portable
          path: target/Shimeji-ee_*_Portable.zip
          retention-days: 1
          if-no-files-found: warn

  create-release:
    needs: [build-jar, build-jpackage-windows]
    runs-on: ubuntu-latest
    if: needs.build-jar.outputs.build-success == 'true'

    steps:
      - name: Checkout code (for release notes)
        uses: actions/checkout@v4

      - name: Download all platform packages
        uses: actions/download-artifact@v4
        with:
          pattern: Shimeji-ee-*
          merge-multiple: true

      - name: Validate version tag
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Ensure version starts with 'v'
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "Error: Version must follow semantic versioning format (e.g., v1.0.0)"
            exit 1
          fi
          
          # Check if tag already exists
          if git tag | grep -q "^$VERSION$"; then
            echo "Error: Tag $VERSION already exists"
            exit 1
          fi
          
          echo "version_tag=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.validate.outputs.version_tag }}"
          RELEASE_NAME="${{ github.event.inputs.release_name }}"
          BUILD_TIME=$(date '+%Y-%m-%d %H:%M:%S UTC')
          
          cat > release_notes.md << EOF
          # $RELEASE_NAME
          
          **Release Date / 发布日期:** $BUILD_TIME  
          **Version / 版本:** $VERSION  
          **Commit / 提交:** ${{ github.sha }}
          
          ## What's included / 包含内容:
          
          ### Native packages built with Maven + jpackage / 使用 Maven + jpackage 构建的原生包:
          - **Windows MSI Installer** - Windows MSI installer with embedded JRE / Windows MSI 安装程序，含嵌入式 JRE
          - **Windows Portable** - Windows portable version with embedded JRE / Windows 便携版，含嵌入式 JRE
          
          ## Installation / 安装说明:
          
          ### Windows (推荐使用)
          1. **MSI Installer / MSI 安装程序**: Download and run the MSI file for system-wide installation
             下载并运行 MSI 文件进行系统级安装
          2. **Portable Version / 便携版**: Extract the portable zip and run Shimeji-ee.exe
             解压便携版 zip 并运行 Shimeji-ee.exe
          
          **No Java installation required! All packages include embedded JRE 21.**
          **无需安装 Java！所有包都包含嵌入式 JRE 21。**
          
          ## Technical Details / 技术详情:
          - **JRE Version / JRE 版本**: OpenJDK 21 (embedded in native packages)
          - **Build Tool / 构建工具**: Maven + jpackage (part of JDK)
          - **Packaging / 打包方式**: Native application bundles with embedded runtime
          
          ## Advantages of Maven + jpackage builds / Maven + jpackage 构建的优势:
          - **Zero Java dependency / 零 Java 依赖**: No need to install Java separately
          - **Native performance / 原生性能**: Better startup time and system integration
          - **Easy distribution / 简易分发**: Single file/folder contains everything needed
          - **System integration / 系统集成**: Proper application registration (Windows)
          - **Maven integration / Maven 集成**: Streamlined build process with dependency management
          
          ## Changes in this release / 此版本更改:
          
          <!-- Add your release notes here / 在此添加发布说明 -->
          
          ---
          *This release was manually created from commit ${{ github.sha }} / 此版本由提交 ${{ github.sha }} 手动创建*
          EOF

      - name: Create release
        run: |
          VERSION="${{ steps.validate.outputs.version_tag }}"
          RELEASE_NAME="${{ github.event.inputs.release_name }}"
          IS_PRERELEASE="${{ github.event.inputs.is_prerelease }}"
          
          echo "Creating release: $VERSION"
          
          # List all downloaded files for debugging
          echo "Available files:"
          ls -la
          
          # Create release with files that exist
          FILES_TO_UPLOAD=""
          
          # Check for MSI files
          if ls *.msi 1> /dev/null 2>&1; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD *.msi"
          fi
          
          # Check for portable ZIP files
          if ls *Portable*.zip 1> /dev/null 2>&1; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD *Portable*.zip"
          fi
          
          echo "Files to upload: $FILES_TO_UPLOAD"
          
          if [ -z "$FILES_TO_UPLOAD" ]; then
            echo "Warning: No MSI or portable files found to upload"
            exit 1
          fi
          
          # Create the release
          PRERELEASE_FLAG=""
          if [ "$IS_PRERELEASE" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          
          gh release create "$VERSION" \
            --title "$RELEASE_NAME" \
            --notes-file release_notes.md \
            $PRERELEASE_FLAG \
            $FILES_TO_UPLOAD
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
