name: Manual Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_name:
        description: 'Release name (e.g., Shimeji-ee v1.0.0)'
        required: true
        type: string
      is_prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

jobs:
  build-jar:
    runs-on: ubuntu-latest
    outputs:
      jar-artifact: ${{ steps.upload.outputs.artifact-id }}
      build-success: ${{ steps.build.outputs.build_success }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Maven Daemon (mvnd)
        run: |
          # Download and install mvnd for faster builds
          curl -L https://github.com/apache/maven-mvnd/releases/download/1.0.2/maven-mvnd-1.0.2-linux-amd64.tar.gz -o mvnd.tar.gz
          tar -xzf mvnd.tar.gz
          sudo mv maven-mvnd-1.0.2-linux-amd64 /opt/mvnd
          sudo ln -s /opt/mvnd/bin/mvnd /usr/local/bin/mvnd
          mvnd --version

      - name: Build JAR with Maven Daemon
        id: build
        run: |
          echo "Building JAR using mvnd clean package..."
          if mvnd clean package -DskipTests; then
            echo "Build successful"
            echo "build_success=true" >> $GITHUB_OUTPUT
          
            # Check if JAR file exists
            if [ -f "target/Shimeji-ee.jar" ]; then
              echo "JAR file created successfully: target/Shimeji-ee.jar"
              JAR_SIZE=$(stat -c%s "target/Shimeji-ee.jar")
              echo "JAR file size: $JAR_SIZE bytes"
            else
              echo "Error: JAR file not found after build"
              echo "build_success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "Build failed"
            echo "build_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload JAR artifact
        id: upload
        if: steps.build.outputs.build_success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: shimeji-jar
          path: |
            target/Shimeji-ee.jar
            lib/
            conf/
            img/
            *.txt
            *.md
            LICENSE
            MANIFEST.MF
          retention-days: 1

  build-jpackage-windows:
    needs: build-jar
    if: needs.build-jar.outputs.build-success == 'true'
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install WiX Toolset
        run: |
          # Download and install WiX Toolset v3.14.1
          $url = "https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314.exe"
          $output = "$env:TEMP\wix314.exe"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process -FilePath $output -ArgumentList "/install", "/quiet", "/norestart" -Wait
          # Add WiX to PATH
          echo "C:\Program Files (x86)\WiX Toolset v3.14\bin" >> $env:GITHUB_PATH
        shell: powershell

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: shimeji-jar
          path: dist

      - name: Prepare jpackage input directory
        run: |
          # Create input directory structure
          New-Item -ItemType Directory -Force -Path "jpackage-input"
          New-Item -ItemType Directory -Force -Path "jpackage-input\lib"
          
          # Copy JAR file
          Copy-Item "dist\target\Shimeji-ee.jar" "jpackage-input\lib\"
          
          # Copy conf and img directories
          Copy-Item -Recurse "dist\conf" "jpackage-input\"
          Copy-Item -Recurse "dist\img" "jpackage-input\"
          
          # Copy additional files if they exist
          if (Test-Path "dist\*.txt") { Copy-Item "dist\*.txt" "jpackage-input\" }
          if (Test-Path "dist\*.md") { Copy-Item "dist\*.md" "jpackage-input\" }
          if (Test-Path "dist\LICENSE") { Copy-Item "dist\LICENSE" "jpackage-input\" }
        shell: powershell

      - name: Build jpackage Windows MSI
        run: |
          jpackage `
            --type msi `
            --input jpackage-input `
            --dest target `
            --name "Shimeji-ee" `
            --main-jar lib/Shimeji-ee.jar `
            --main-class com.group_finity.mascot.Main `
            --java-options "--enable-native-access=ALL-UNNAMED" `
            --java-options "--add-opens=java.base/java.lang=ALL-UNNAMED" `
            --java-options "--add-opens=java.desktop/sun.awt=ALL-UNNAMED" `
            --java-options "--add-opens=java.desktop/java.awt=ALL-UNNAMED" `
            --java-options "-Xmx512M" `
            --java-options "-Xms128M" `
            --java-options "-XX:+UseG1GC" `
            --app-version "2.0.0" `
            --description "A desktop mascot that freely wanders and plays around the screen" `
            --vendor "Group Finity" `
            --copyright "Copyright (c) 2009 Group Finity" `
            --win-menu `
            --win-shortcut `
            --win-dir-chooser `
            --win-upgrade-uuid "12345678-1234-1234-1234-123456789012"
        shell: powershell

      - name: Build jpackage Windows Portable
        run: |
          jpackage `
            --type app-image `
            --input jpackage-input `
            --dest target `
            --name "Shimeji-ee-Portable" `
            --main-jar lib/Shimeji-ee.jar `
            --main-class com.group_finity.mascot.Main `
            --java-options "--enable-native-access=ALL-UNNAMED" `
            --java-options "--add-opens=java.base/java.lang=ALL-UNNAMED" `
            --java-options "--add-opens=java.desktop/sun.awt=ALL-UNNAMED" `
            --java-options "--add-opens=java.desktop/java.awt=ALL-UNNAMED" `
            --java-options "-Xmx512M" `
            --java-options "-Xms128M" `
            --java-options "-XX:+UseG1GC" `
            --app-version "2.0.0" `
            --description "A desktop mascot that freely wanders and plays around the screen" `
            --vendor "Group Finity"
          
          # Create portable ZIP
          Compress-Archive -Path "target\Shimeji-ee-Portable" -DestinationPath "target\Shimeji-ee_Windows_Portable.zip"
        shell: powershell

      - name: Upload Windows MSI installer
        uses: actions/upload-artifact@v4
        with:
          name: Shimeji-ee-windows-msi
          path: target/*.msi
          retention-days: 1
          if-no-files-found: warn

      - name: Upload Windows portable package
        uses: actions/upload-artifact@v4
        with:
          name: Shimeji-ee-windows-portable
          path: target/Shimeji-ee_Windows_Portable.zip
          retention-days: 1
          if-no-files-found: warn

  build-jpackage-macos:
    needs: build-jar
    if: needs.build-jar.outputs.build-success == 'true'
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: shimeji-jar
          path: dist

      - name: Prepare jpackage input directory
        run: |
          # Create input directory structure
          mkdir -p jpackage-input/lib
          
          # Copy JAR file
          cp dist/target/Shimeji-ee.jar jpackage-input/lib/
          
          # Copy conf and img directories
          cp -r dist/conf jpackage-input/
          cp -r dist/img jpackage-input/
          
          # Copy additional files if they exist
          [ -f dist/*.txt ] && cp dist/*.txt jpackage-input/ || true
          [ -f dist/*.md ] && cp dist/*.md jpackage-input/ || true
          [ -f dist/LICENSE ] && cp dist/LICENSE jpackage-input/ || true

      - name: Build jpackage macOS DMG
        run: |
          jpackage \
            --type dmg \
            --input jpackage-input \
            --dest target \
            --name "Shimeji-ee" \
            --main-jar lib/Shimeji-ee.jar \
            --main-class com.group_finity.mascot.Main \
            --java-options "--enable-native-access=ALL-UNNAMED" \
            --java-options "--add-opens=java.base/java.lang=ALL-UNNAMED" \
            --java-options "--add-opens=java.desktop/sun.awt=ALL-UNNAMED" \
            --java-options "--add-opens=java.desktop/java.awt=ALL-UNNAMED" \
            --java-options "-Xmx512M" \
            --java-options "-Xms128M" \
            --java-options "-XX:+UseG1GC" \
            --app-version "2.0.0" \
            --description "A desktop mascot that freely wanders and plays around the screen" \
            --vendor "Group Finity" \
            --copyright "Copyright (c) 2009 Group Finity" \
            --mac-sign

      - name: Upload macOS DMG package
        uses: actions/upload-artifact@v4
        with:
          name: Shimeji-ee-macos-dmg
          path: target/*.dmg
          retention-days: 1
          if-no-files-found: warn

  build-jpackage-linux:
    needs: build-jar
    if: needs.build-jar.outputs.build-success == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install packaging dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm fuse libfuse2

      - name: Download AppImage tool
        run: |
          # Download appimagetool
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: shimeji-jar
          path: dist

      - name: Prepare jpackage input directory
        run: |
          # Create input directory structure
          mkdir -p jpackage-input/lib
          
          # Copy JAR file
          cp dist/target/Shimeji-ee.jar jpackage-input/lib/
          
          # Copy conf and img directories
          cp -r dist/conf jpackage-input/
          cp -r dist/img jpackage-input/
          
          # Copy additional files if they exist
          [ -f dist/*.txt ] && cp dist/*.txt jpackage-input/ || true
          [ -f dist/*.md ] && cp dist/*.md jpackage-input/ || true
          [ -f dist/LICENSE ] && cp dist/LICENSE jpackage-input/ || true

      - name: Build jpackage Linux DEB
        run: |
          jpackage \
            --type deb \
            --input jpackage-input \
            --dest target \
            --name "shimeji-ee" \
            --main-jar lib/Shimeji-ee.jar \
            --main-class com.group_finity.mascot.Main \
            --java-options "--enable-native-access=ALL-UNNAMED" \
            --java-options "--add-opens=java.base/java.lang=ALL-UNNAMED" \
            --java-options "--add-opens=java.desktop/sun.awt=ALL-UNNAMED" \
            --java-options "--add-opens=java.desktop/java.awt=ALL-UNNAMED" \
            --java-options "-Xmx512M" \
            --java-options "-Xms128M" \
            --java-options "-XX:+UseG1GC" \
            --app-version "2.0.0" \
            --description "A desktop mascot that freely wanders and plays around the screen" \
            --vendor "Group Finity" \
            --copyright "Copyright (c) 2009 Group Finity" \
            --linux-shortcut \
            --linux-menu-group "Games"

      - name: Build jpackage Linux RPM
        run: |
          jpackage \
            --type rpm \
            --input jpackage-input \
            --dest target \
            --name "shimeji-ee" \
            --main-jar lib/Shimeji-ee.jar \
            --main-class com.group_finity.mascot.Main \
            --java-options "--enable-native-access=ALL-UNNAMED" \
            --java-options "--add-opens=java.base/java.lang=ALL-UNNAMED" \
            --java-options "--add-opens=java.desktop/sun.awt=ALL-UNNAMED" \
            --java-options "--add-opens=java.desktop/java.awt=ALL-UNNAMED" \
            --java-options "-Xmx512M" \
            --java-options "-Xms128M" \
            --java-options "-XX:+UseG1GC" \
            --app-version "2.0.0" \
            --description "A desktop mascot that freely wanders and plays around the screen" \
            --vendor "Group Finity" \
            --copyright "Copyright (c) 2009 Group Finity" \
            --linux-shortcut \
            --linux-menu-group "Games"

      - name: Build AppImage
        run: |
          # Create app-image first
          jpackage \
            --type app-image \
            --input jpackage-input \
            --dest target \
            --name "Shimeji-ee" \
            --main-jar lib/Shimeji-ee.jar \
            --main-class com.group_finity.mascot.Main \
            --java-options "--enable-native-access=ALL-UNNAMED" \
            --java-options "--add-opens=java.base/java.lang=ALL-UNNAMED" \
            --java-options "--add-opens=java.desktop/sun.awt=ALL-UNNAMED" \
            --java-options "--add-opens=java.desktop/java.awt=ALL-UNNAMED" \
            --java-options "-Xmx512M" \
            --java-options "-Xms128M" \
            --java-options "-XX:+UseG1GC" \
            --app-version "2.0.0" \
            --description "A desktop mascot that freely wanders and plays around the screen" \
            --vendor "Group Finity"
          
          # Create AppDir structure for AppImage
          mkdir -p AppDir
          cp -r target/Shimeji-ee/* AppDir/
          
          # Create desktop file
          cat > AppDir/Shimeji-ee.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Shimeji-ee
          Exec=Shimeji-ee
          Icon=shimeji-ee
          Comment=A desktop mascot that freely wanders and plays around the screen
          Categories=Game;
          EOF
          
          # Copy icon if exists
          if [ -f "dist/img/icon.png" ]; then
            cp dist/img/icon.png AppDir/shimeji-ee.png
          elif [ -f "img/icon.png" ]; then
            cp img/icon.png AppDir/shimeji-ee.png
          fi
          
          # Create AppRun script
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          export PATH="${HERE}/bin:${PATH}"
          exec "${HERE}/bin/Shimeji-ee" "$@"
          EOF
          chmod +x AppDir/AppRun
          
          # Build AppImage
          ARCH=x86_64 appimagetool AppDir target/Shimeji-ee-x86_64.AppImage

      - name: Upload Linux DEB package
        uses: actions/upload-artifact@v4
        with:
          name: Shimeji-ee-linux-deb
          path: target/*.deb
          retention-days: 1
          if-no-files-found: warn

      - name: Upload Linux RPM package
        uses: actions/upload-artifact@v4
        with:
          name: Shimeji-ee-linux-rpm
          path: target/*.rpm
          retention-days: 1
          if-no-files-found: warn

      - name: Upload Linux AppImage
        uses: actions/upload-artifact@v4
        with:
          name: Shimeji-ee-linux-appimage
          path: target/*.AppImage
          retention-days: 1
          if-no-files-found: warn

  create-release:
    needs: [build-jar, build-jpackage-windows, build-jpackage-macos, build-jpackage-linux]
    runs-on: ubuntu-latest
    if: needs.build-jar.outputs.build-success == 'true'

    steps:
      - name: Checkout code (for release notes)
        uses: actions/checkout@v4

      - name: Download all platform packages
        uses: actions/download-artifact@v4
        with:
          pattern: Shimeji-ee-*
          merge-multiple: true

      - name: Validate version tag
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Ensure version starts with 'v'
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "Error: Version must follow semantic versioning format (e.g., v1.0.0)"
            exit 1
          fi
          
          # Check if tag already exists
          if git tag | grep -q "^$VERSION$"; then
            echo "Error: Tag $VERSION already exists"
            exit 1
          fi
          
          echo "version_tag=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.validate.outputs.version_tag }}"
          RELEASE_NAME="${{ github.event.inputs.release_name }}"
          BUILD_TIME=$(date '+%Y-%m-%d %H:%M:%S UTC')
          
          cat > release_notes.md << EOF
          # $RELEASE_NAME
          
          **Release Date / 发布日期:** $BUILD_TIME  
          **Version / 版本:** $VERSION  
          **Commit / 提交:** ${{ github.sha }}
          
          ## What's included / 包含内容:
          
          ### Native packages built with jpackage / 使用 jpackage 构建的原生包:
          
          #### Windows
          - **Shimeji-ee.msi** - Windows MSI installer with embedded JRE / Windows MSI 安装程序，含嵌入式 JRE
          - **Shimeji-ee_Windows_Portable.zip** - Windows portable version with embedded JRE / Windows 便携版，含嵌入式 JRE
          
          #### macOS
          - **Shimeji-ee.dmg** - macOS DMG installer with embedded JRE / macOS DMG 安装程序，含嵌入式 JRE
          
          #### Linux
          - **shimeji-ee.deb** - Debian/Ubuntu package with embedded JRE / Debian/Ubuntu 包，含嵌入式 JRE
          - **shimeji-ee.rpm** - Red Hat/Fedora package with embedded JRE / Red Hat/Fedora 包，含嵌入式 JRE
          - **Shimeji-ee-x86_64.AppImage** - Universal Linux AppImage with embedded JRE / 通用 Linux AppImage，含嵌入式 JRE
          
          ## Installation / 安装说明:
          
          ### Windows (推荐使用)
          1. **MSI Installer / MSI 安装程序**: Download and run the MSI file for system-wide installation
             下载并运行 MSI 文件进行系统级安装
          2. **Portable Version / 便携版**: Extract the portable zip and run Shimeji-ee.exe
             解压便携版 zip 并运行 Shimeji-ee.exe
          
          ### macOS
          1. **DMG Installer / DMG 安装程序**: Download and open the DMG file, drag Shimeji-ee to Applications
             下载并打开 DMG 文件，将 Shimeji-ee 拖到应用程序文件夹
          
          ### Linux
          1. **DEB Package / DEB 包**: Install with \`sudo dpkg -i shimeji-ee.deb\` (Debian/Ubuntu)
             使用 \`sudo dpkg -i shimeji-ee.deb\` 安装 (Debian/Ubuntu)
          2. **RPM Package / RPM 包**: Install with \`sudo rpm -i shimeji-ee.rpm\` (Red Hat/Fedora)
             使用 \`sudo rpm -i shimeji-ee.rpm\` 安装 (Red Hat/Fedora)
          3. **AppImage**: Make executable and run: \`chmod +x Shimeji-ee-x86_64.AppImage && ./Shimeji-ee-x86_64.AppImage\`
             赋予执行权限并运行: \`chmod +x Shimeji-ee-x86_64.AppImage && ./Shimeji-ee-x86_64.AppImage\`
          
          **No Java installation required! All packages include embedded JRE 21.**
          **无需安装 Java！所有包都包含嵌入式 JRE 21。**
          
          ## Technical Details / 技术详情:
          - **JRE Version / JRE 版本**: OpenJDK 21 (embedded in native packages)
          - **Build Tool / 构建工具**: Maven + jpackage (part of JDK)
          - **Packaging / 打包方式**: Native application bundles with embedded runtime
          
          ## Advantages of jpackage builds / jpackage 构建的优势:
          - **Zero Java dependency / 零 Java 依赖**: No need to install Java separately
          - **Native performance / 原生性能**: Better startup time and system integration
          - **Easy distribution / 简易分发**: Single file/folder contains everything needed
          - **System integration / 系统集成**: Proper application registration and desktop shortcuts
          - **Cross-platform / 跨平台**: Native packages for Windows, macOS, and Linux
          
          ## Changes in this release / 此版本更改:
          
          <!-- Add your release notes here / 在此添加发布说明 -->
          
          ---
          *This release was manually created from commit ${{ github.sha }} / 此版本由提交 ${{ github.sha }} 手动创建*
          EOF

      - name: Create release
        run: |
          VERSION="${{ steps.validate.outputs.version_tag }}"
          RELEASE_NAME="${{ github.event.inputs.release_name }}"
          IS_PRERELEASE="${{ github.event.inputs.is_prerelease }}"
          
          echo "Creating release: $VERSION"
          
          # List all downloaded files for debugging
          echo "Available files:"
          ls -la
          
          # Create release with files that exist
          FILES_TO_UPLOAD=""
          
          # Check for Windows files
          if ls *.msi 1> /dev/null 2>&1; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD *.msi"
          fi
          if ls *Portable*.zip 1> /dev/null 2>&1; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD *Portable*.zip"
          fi
          
          # Check for macOS files
          if ls *.dmg 1> /dev/null 2>&1; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD *.dmg"
          fi
          
          # Check for Linux files
          if ls *.deb 1> /dev/null 2>&1; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD *.deb"
          fi
          if ls *.rpm 1> /dev/null 2>&1; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD *.rpm"
          fi
          if ls *.AppImage 1> /dev/null 2>&1; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD *.AppImage"
          fi
          
          echo "Files to upload: $FILES_TO_UPLOAD"
          
          if [ -z "$FILES_TO_UPLOAD" ]; then
            echo "Warning: No package files found to upload"
            exit 1
          fi
          
          # Create the release
          PRERELEASE_FLAG=""
          if [ "$IS_PRERELEASE" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          
          gh release create "$VERSION" \
            --title "$RELEASE_NAME" \
            --notes-file release_notes.md \
            $PRERELEASE_FLAG \
            $FILES_TO_UPLOAD
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
